* C

| Input       | Black box | Output       |
| Source code | Compiler  | Machine code |


There are compilers to help us program without needing to write machine code.

Finally translating to binary code.

Writing good code takes time and practice, evaluate the quality:

- Correctness
- Design
  How to communicate, how optimized.
- Style
  Will make it more readable

** Data types
*** Native
In C we need to declare the data type we will use.

- int (signed)
  Integer values, takes up 4 bytes of memory, 32 bits.
  -2^31, 2^31-1

- unsigned int
  Range of values are in the positive range.
  0, 2^32-1

- char
  Single characters, takes up 1 byte, 8 bits.
  -128, 127
  A = 65, ASCII standard.

- float
  Floating point numbers, 4 bytes of memory 32 bits.
  Precision depents on the number.

- double
  More precision than float, 8 bytes, 64 bits.

- void
  It is a *type*, functions can have void return type.
  For example printf, prints text out to standard output but returns nothing.

  For example: int main(void), doesn't take any arguments.


Create a variable when you need it.
After declaration, there is no need to declare again the type
#begin_src:
// Declare a variable.
int number;
char letter;

// Declaring multiple variables.
int height number, width;
float sqrt2, sqrt3, pi;

int n; // declaration
n = 1; // assignment

char letter; // declaration
letter = 'a' // assignment

int n = 1; // initialization
char letter = 'a'; // initialization
#end_src:


*** cs50.h

- bool
  Variable with Boolean type, true or false.

- string
  Series of characters, concatenation of chars.

- structs, typedefs...

** Operators
*** Arithmetic operators

- Add (+)
- Subtract (-)
- Multiply (*)
- Divide (/)
- Modulus (%)
  Gives the remainder of the division.

**** Shortcuts
- x ++;
  x = x + 1;
  
- x --;
  x = x - 1;
  
- x *= 2;

*** Boolean expressions
In the cs50 library type bool is used.

In C, !0 = true and 0 is false.

Logical operators and relational operators.

**** Logical operators
- ! (not)
  | x     | !x    |
  | true  | false |
  | false | true  |

- && (and)
  | x     | y     | (x && y) |
  | true  | true  | true     |
  | true  | false | false    |
  | false | true  | false    |
  | false | false | false    |

- || (or)
  | x     | y     | (x && y) |
  | true  | true  | true     |
  | true  | false | true     |
  | false | true  | true     |
  | false | false | false    |


**** Relational operators
- < (less than)
- <= (less or equal to)
- > (greater than)
- >= (greater or equal to)
- x == y (equality)
  x = y is used for asignment,
  x == y is used for comparing.
- x != y (inequality)

*** Conditional statements
Conditional branch / expressions
- if
#begin_src:
if (bool-exp1)
{

}
if (bool-exp2)
{

}
else if (bool-exp3)
{

}
else
{

}
#end_src:
- switch
#begin_src:
int x = get_int()
switch(x)
case 3:
    printf("Three, ")
case 2:
    printf("Two, ")
case 1:
    printf("One, ")
default:
    printf("Go!\n")
#end_src:
- ?: (ternary operator)
Used for short conditional branches.
#begin_src:
int x = (exp) ? 5 : 6;


int x;
if (exp)
{
    x = 5;
}
else
{
    x = 6;
}
#end_src:

*** Loops
Use whie loop when you want to repeat unknown number of times,

do while for at least one time and for loop for a discrete number of times.

They are interchangeable, but should use the one that makes the most sense.
- while true (infinite loop)
  Escape with break or escape.

- while
  Loop will run until the condition is false.

- do while
  Will execute the code inside the do loop and check the condition,
  will run the code at least one time.

- for loop
  #begin_src:
  for (int i = 0; i < 10; i++)
  //  (start; expr; increment)
  {

  }
  #end_src:
  Repeats the code inside until i<10 is false.
  
* Command Line
- ls
  lists the content of current directory.
- cd
  changes current directory.
  - cd ..
    Go to parent directory
  - cd .
    Go to current directory
  - cd ~ || cd
    Go to current user home directory
  - cd /
    Go to root
- pwd
  Displays current working directory.
- cp
  Copies files.
#begin_src:
  cp [option] <origin-path> <destination-path>
#end_src:
  - option -r
    copies recursively
- rm
  Used for deleting nodes, use -r option to remove recursively.
- mv
  Used for moving and renaming files.
  
* Visual Studio
VS Code helps us to format and compile code.

Widely used, various programming languages.

Mix of GUI and CLI

** Terminal
CLI, input via keyboard, more features than GUI, efficiency.

Compile code, running.
#+begin_src:
code hello.c
make hello
./hello 
#+end_src:

Follow best practices.

